#include "imports/stdlib.fc";
#include "constants.fc";

global slice data::sale;
global slice data::user;
global int data::available;

() load_data() impure {
    slice ds = get_data().begin_parse();
    data::sale = ds~load_msg_addr();
    data::user = ds~load_msg_addr();
    data::available = ds~load_uint(32);
}

() save_data() impure {
    set_data(begin_cell()
        .store_slice(data::sale)
        .store_slice(data::user)
        .store_uint(data::available, 32)
    .end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ((flags & 1) | in_msg_body.slice_bits() < 32) {
        return ();
    }
    slice sender = cs~load_msg_addr();
    load_data();

    throw_unless(error::wrong_sender, equal_slices(sender, data::sale));

    int op = in_msg_body~load_uint(32);

    if (op == op::purchase_check) {
        int query_id = in_msg_body~load_uint(64);
        int quantity = in_msg_body~load_uint(16);

        if (quantity > data::available) {
            quantity = data::available;
        }

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(data::sale)
            .store_coins(0)
            .store_uint(0, 107)
            .store_uint(op::purchase_confirm, 32)
            .store_uint(query_id, 64)
            .store_uint(quantity, 16)
            .store_slice(data::user)
        .end_cell(), 64);

        data::available -= quantity;
        save_data();
    }

    elseif (op = op::bounced) {
        in_msg_body~skip_bits(32);

        send_raw_message(begin_cell()
            .store_uint(0x10, 6)
            .store_slice(data::user)
            .store_coins(0)
            .store_uint(0, 107)
            .store_uint(in_msg_body~load_uint(64), 64)
        .end_cell(), 64);

        data::available += in_msg_body~load_uint(16);
        save_data();
    }
}
