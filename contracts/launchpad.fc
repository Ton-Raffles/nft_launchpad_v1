#include "imports/stdlib.fc";

global int admin_pubkey;
global int available;
global int price;
global int last_index;
global slice collection;
global int buyer_limit;
global cell buyers;
global int start_time;
global int end_time;

global int query_id;
global slice sender;

const int op::purchase = 0x4c56b6b5;

const int const::fees = 60000000;
const int const::deploy_value = 50000000;

const int error::invalid_signature = 701;
const int error::wrong_sender = 702;
const int error::not_enough_value = 703;
const int error::wrong_time = 704;
const int error::zero_purchase = 705;
const int error::wrong_workchain = 706;

() load_data() impure {
    slice ds = get_data().begin_parse();
    admin_pubkey = ds~load_uint(256);
    available = ds~load_uint(32);
    price = ds~load_coins();
    last_index = ds~load_uint(32);
    collection = ds~load_msg_addr();
    buyer_limit = ds~load_uint(32);
    buyers = ds~load_dict();
    start_time = ds~load_uint(32);
    end_time = ds~load_uint(32);
}

() save_data() impure {
    set_data(begin_cell()
        .store_uint(admin_pubkey, 256)
        .store_uint(available, 32)
        .store_coins(price)
        .store_uint(last_index, 32)
        .store_slice(collection)
        .store_uint(buyer_limit, 32)
        .store_dict(buyers)
        .store_uint(start_time, 32)
        .store_uint(end_time, 32)
    .end_cell());
}

(builder) store_int_as_string(builder b, int x) asm """
    ZERO SWAP

    UNTIL:<{
        10 PUSHINT DIVMOD
        48 ADDCONST
        s2 XCHG0
        s2 s3 XCHG
        INC SWAP
        DUP ISZERO
    }> DROP

    REPEAT:<{ 8 STU }>
""";

() mint(int quantity) impure {
    while (quantity > 0) {
        cell nfts = new_dict();
        int N = min(quantity, 250);
        repeat (N) {
            nfts~udict_set(64, last_index, begin_cell()
                .store_coins(const::deploy_value)
                .store_ref(begin_cell()
                    .store_slice(sender)
                    .store_ref(begin_cell()
                        .store_int_as_string(last_index)
                        .store_slice(".json")
                    .end_cell())
                .end_cell())
            .end_cell().begin_parse());
            last_index += 1;
        }
        
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(collection)
            .store_coins(const::fees * (N + 1))
            .store_uint(0, 107)
            .store_uint(2, 32)
            .store_uint(query_id, 64)
            .store_ref(nfts)
        .end_cell(), 1);

        quantity -= 250;
    }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ((flags & 1) | in_msg_body.slice_empty?()) {
        return ();
    }
    sender = cs~load_msg_addr();
    load_data();

    int op = in_msg_body~load_uint(32);

    if (op == op::purchase) {
        throw_unless(error::wrong_time, (now() >= start_time) & (now() <= end_time));

        int quantity = in_msg_body~load_uint(16);
        slice signature = in_msg_body~load_bits(512);
        throw_unless(error::invalid_signature, check_signature(slice_hash(in_msg_body), signature, admin_pubkey));
        query_id = in_msg_body~load_uint(64);
        slice user = in_msg_body~load_msg_addr();
        throw_unless(error::wrong_sender, equal_slices(sender, user));
        (int workchain, int account_id) = parse_std_addr(user);
        throw_unless(error::wrong_workchain, workchain == 0);

        if (quantity > available) {
            quantity = available;
        }
        (slice v, int f?) = buyers.udict_get?(256, account_id);
        int buyer_bought = 0;
        if (f?) {
            buyer_bought = v~load_uint(32);
        }
        if (quantity > (buyer_limit - buyer_bought)) {
            quantity = buyer_limit - buyer_bought;
        }
        throw_unless(error::zero_purchase, quantity > 0);

        int value = (const::fees * 2 * ((quantity + 249) / 250)) + (quantity * (price + const::deploy_value));
        throw_unless(error::not_enough_value, msg_value >= value);
        available -= quantity;
        buyers~udict_set(256, account_id, begin_cell().store_uint(buyer_bought + quantity, 32).end_cell().begin_parse());

        mint(quantity);

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(msg_value - value)
            .store_uint(0, 107)
        .end_cell(), 2);

        save_data();
    }
}
