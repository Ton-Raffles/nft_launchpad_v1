#include "imports/stdlib.fc";
#include "constants.fc";

global int data::admin_pubkey;
global int data::available;
global int data::price;
global int data::last_index;
global slice data::collection;
global int data::buyer_limit;
global int data::start_time;
global int data::end_time;
global slice data::admin_address;
global int data::active;
global cell data::helper_code;
global int data::total_affilate;
global int data::affilate_percentage;

global int query_id;
global slice sender;

() load_data() impure {
    slice ds = get_data().begin_parse();
    data::admin_pubkey = ds~load_uint(256);
    data::available = ds~load_uint(32);
    data::price = ds~load_coins();
    data::last_index = ds~load_uint(32);
    data::collection = ds~load_msg_addr();
    data::buyer_limit = ds~load_uint(32);
    data::start_time = ds~load_uint(32);
    data::end_time = ds~load_uint(32);
    data::admin_address = ds~load_msg_addr();
    data::active = ds~load_int(1);
    data::helper_code = ds~load_ref();
    slice next = ds~load_ref().begin_parse();
    data::total_affilate = next~load_coins();
    data::affilate_percentage = next~load_uint(16);
}

() save_data() impure {
    set_data(begin_cell()
        .store_uint(data::admin_pubkey, 256)
        .store_uint(data::available, 32)
        .store_coins(data::price)
        .store_uint(data::last_index, 32)
        .store_slice(data::collection)
        .store_uint(data::buyer_limit, 32)
        .store_uint(data::start_time, 32)
        .store_uint(data::end_time, 32)
        .store_slice(data::admin_address)
        .store_int(data::active, 1)
        .store_ref(data::helper_code)
        .store_ref(begin_cell()
            .store_coins(data::total_affilate)
            .store_uint(data::affilate_percentage, 16)
        .end_cell())
    .end_cell());
}

(builder) store_int_as_string(builder b, int x) asm """
    ZERO SWAP

    UNTIL:<{
        10 PUSHINT DIVMOD
        48 ADDCONST
        s2 XCHG0
        s2 s3 XCHG
        INC SWAP
        DUP ISZERO
    }> DROP

    REPEAT:<{ 8 STU }>
""";

(cell) calculate_helper_stateinit(slice user) {
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(data::helper_code)
        .store_dict(begin_cell()
            .store_slice(my_address())
            .store_slice(user)
            .store_uint(data::buyer_limit, 32)
            .store_coins(0)
        .end_cell())
        .store_uint(0, 1)
    .end_cell();
}

(slice) calculate_helper_address(cell stateinit) {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(0, 8)
        .store_uint(cell_hash(stateinit), 256)
    .end_cell().begin_parse();
}

() mint(slice user, int quantity) impure {
    cell nfts = new_dict();
    repeat (quantity) {
        nfts~udict_set(64, data::last_index, begin_cell()
            .store_coins(const::deploy_value)
            .store_ref(begin_cell()
                .store_slice(user)
                .store_ref(begin_cell()
                    .store_int_as_string(data::last_index)
                    .store_slice(".json")
                .end_cell())
            .end_cell())
        .end_cell().begin_parse());
        data::last_index += 1;
    }
    
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(data::collection)
        .store_coins((const::fees + const::deploy_value) * quantity)
        .store_uint(0, 107)
        .store_uint(2, 32)
        .store_uint(query_id, 64)
        .store_ref(nfts)
    .end_cell(), 1);
}

() check(slice user, int quantity, slice maybe_referrer) impure {
    cell helper_stateinit = calculate_helper_stateinit(user);
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(calculate_helper_address(helper_stateinit))
        .store_coins(0)
        .store_uint(4 + 2, 108)
        .store_ref(helper_stateinit)
        .store_uint(op::purchase_check, 32)
        .store_uint(query_id, 64)
        .store_uint(quantity, 16)
        .store_slice(maybe_referrer)
    .end_cell(), 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ((flags & 1) | in_msg_body.slice_bits() < 32) {
        return ();
    }
    sender = cs~load_msg_addr();
    load_data();

    throw_unless(error::inactive, data::active);

    int op = in_msg_body~load_uint(32);

    if (op == op::purchase) {
        throw_unless(error::wrong_time, (now() >= data::start_time) & (now() <= data::end_time));

        query_id = in_msg_body~load_uint(64);
        int quantity = in_msg_body~load_uint(16);

        throw_unless(error::too_many_items, quantity <= 100);

        int value = quantity * (data::price + const::deploy_value + const::fees * 2) + const::base_fees * 2 + const::fees;
        throw_unless(error::not_enough_value, msg_value >= value);

        int time = in_msg_body~load_uint(64);
        throw_if(error::signature_expired, now() > time + 600);
        slice signature = in_msg_body~load_bits(512);
        throw_unless(error::invalid_signature, check_signature(
            slice_hash(begin_cell().store_slice(sender).store_uint(time, 64).end_cell().begin_parse()),
            signature,
            data::admin_pubkey
        ));
        (int workchain, int account_id) = parse_std_addr(sender);
        throw_unless(error::wrong_workchain, workchain == 0);

        slice maybe_referrer = in_msg_body;

        check(sender, quantity, maybe_referrer);
    }

    elseif (op == op::purchase_confirm) {
        query_id = in_msg_body~load_uint(64);
        int quantity = in_msg_body~load_uint(16);
        slice user = in_msg_body~load_msg_addr();
        slice maybe_referrer = in_msg_body;

        throw_unless(error::wrong_sender, equal_slices(sender, calculate_helper_address(calculate_helper_stateinit(user))));

        if (quantity > data::available) {
            quantity = data::available;
        }

        throw_unless(error::zero_purchase, quantity > 0);

        int value = quantity * (data::price + const::deploy_value + const::fees * 2) + const::base_fees + const::fees;

        throw_unless(error::not_enough_value, msg_value >= value);
        data::available -= quantity;

        mint(user, quantity);

        if (msg_value > value) {
            send_raw_message(begin_cell()
                .store_uint(0x10, 6)
                .store_slice(user)
                .store_coins(msg_value - value)
                .store_uint(0, 107)
            .end_cell(), 2);
        }

        if (data::price > 0) {
            int total = quantity * data::price;

            if (maybe_referrer~load_int(1)) {
                slice referrer = maybe_referrer;
                int referral_part = total * data::affilate_percentage / 10000;
                if (referral_part > 0) {
                    total -= referral_part - const::fees;
                    send_raw_message(begin_cell()
                        .store_uint(0x10, 6)
                        .store_slice(referrer)
                        .store_coins(referral_part)
                        .store_uint(0, 107)
                    .end_cell(), 1);

                    data::total_affilate += referral_part;
                    cell referrer_helper_stateinit = calculate_helper_stateinit(referrer);
                    slice referrer_helper_address = calculate_helper_address(referrer_helper_stateinit);
                    send_raw_message(begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(referrer_helper_address)
                        .store_coins(const::fees)
                        .store_uint(6, 108)
                        .store_ref(referrer_helper_stateinit)
                        .store_uint(op::credit_affilate, 32)
                        .store_uint(query_id, 64)
                        .store_coins(referral_part)
                    .end_cell(), 1);
                }
            }
            
            if (total > 0) {
                send_raw_message(begin_cell()
                    .store_uint(0x10, 6)
                    .store_slice(data::admin_address)
                    .store_coins(total)
                    .store_uint(0, 107)
                .end_cell(), 1);
            }
        }
    }

    elseif (op == op::change_collection_owner) {
        throw_unless(error::wrong_sender, equal_slices(sender, data::admin_address)); ;; Only admin can change the data::collection owner
        slice new_owner = in_msg_body~load_msg_addr();
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(data::collection)
            .store_coins(0)
            .store_uint(0, 107)
            .store_uint(3, 32)
            .store_uint(0, 64)
            .store_slice(new_owner)
        .end_cell(), 64);
        data::active = 0;
    }

    elseif (op == op::change_last_index) {
        throw_unless(error::wrong_sender, equal_slices(sender, data::admin_address)); ;; Only admin can change the data::last_index
        data::last_index = in_msg_body~load_uint(32);
    }

    save_data();
}

(int, int, int, int, slice, int, int, int, slice, int, cell, int, int) get_contract_data() method_id {
    load_data();
    return (data::admin_pubkey, data::available, data::price, data::last_index, data::collection, data::buyer_limit, data::start_time, data::end_time, data::admin_address, data::active, data::helper_code, data::total_affilate, data::affilate_percentage);
}
